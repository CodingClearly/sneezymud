Creating Response Quests

Created: Tuesday, 27 August 1996
Modified: Friday, 30 July 1999

Use command: READ CHAPTER (#) OF RESPONSE where (#) is one of:

 1.) What is a Response Quest
 2.) Example Response File
 3.) Actions and Triggers
 4.) Trigger: say
 5.) Trigger: give
 6.) Trigger: roomenter
 7.) Trigger: socials
 8.) Action: toroom
 9.) Action: tovict
10.) Action: tonotvict
11.) Action: load
12.) Action: link
13.) Action: buy
14.) Action: list
15.) Action: pulse

Advanced topics:
16.) Trigger: package
17.) Action: flag
18.) Action: unflag
19.) Action: personalize
20.) Action: resize
21.) Action: special
22.) Action: checkroom
23.) Action: checkzone
24.) Substring: OBJCOST

Toggles:
25.) Quest Toggles
26.) Best Practices
27.) Action: toggle
28.) Action: untoggle
29.) Action: checktoggle
30.) Action: checkuntoggle
What is a Response Quest?
------------------------

Response quests are special standing quests that represent challenges for 
the players to overcome.  They typically involve providing a series of
clues each of which leads the player along some set path until the quest
is completed.  The clues take the form of having the mob make a statement
or perform some action based on the actions of the player.

Response quests are generated from text files generated offline.  There is
presently no online support for the response files.
Action: tonotvict
---------------------
 
ex:
<trigger> { "<arguments>";
       <other actions>;
       tonotvict <string>;
       <other actions>;
     }

The tonotvict action is an advanced emote or echo command.  It will send 
<string> to everyone in room except the trigger-mob and the person performing
the trigger..  In general, any place you use a tonotvict action should also
have a tovict action so everyone sees similar things.

The beauty of tonotvict is that it allows you to use replacement characters
that will be filled in when it is actually performed based on who did the
trigger and with what.

Replacement strings:
$n  = the trigger-mobs name
$e  = "he", "she" or "it" based on sex of trigger-mob
$m  = "him", "her", "it" based on sex of trigger-mob
$s  = "his", "hers", "its" based on sex of trigger-mob

performer = person who triggered the action
$N  = the performer's name
$E  = "he", "she" or "it" based on sex of performer
$M  = "him", "her", "it" based on sex of performer
$S  = "his", "hers", "its" based on sex of performer

$o  = the first word in the name of the trigger-object (for give)
$p  = the full name of the trigger-object

Example:
tonotvict $n puts $s hand on $N's back.
becomes
A lazy thief puts his hand on Brutius's back.
Action: load
---------------------
 
ex:
<trigger> { "<arguments>";
       <other actions>;
       load <number>;
       <other actions>;
     }

Load will allow the trigger-mob to create items.  <number> must be positive
and represents the vnum of the object that should be created.  The loaded
item will end up in the trigger mobs inventory (for subsequent giving, etc).

Use good judgment about what is loaded.  Limited items, items from other 
people's zone used without permission, etc will all cause problems.

To prevent load piling up objects, if the mob already has the item indicated
in inventory, load will do nothing.  If you really want to load 2 (or more)
items, load one, drop it, load the next, then get the item.  This trick is not
recommended since volume/weight may still cause problems.

At this time, it is not possible to create other creatures.
Action: link
---------------------
 
ex:
<trigger 1> { "<arguments 1>";
       <actions>;
     }

<trigger 2> { "<arguments 2>";
       link <trigger 1> <arguments 1>;
     }

The link action allows for a secondary trigger to use the same actions as
another response.  For instance, if you wanted both "say goodbye" and "say
later" to respond in the same fashion, you could link one of them to the other.
eg.  Under "say goodbye" you would detail all the actions that should be
performed.  Then under "say later" you would put a single action:
    link say goodbye;
which when triggered would hand control over to the "say goodbye" action.
Topic: buy
--------------------

Ex:
buy { "<cost> <index> <name>";
	...responses...;
	}

<cost>  = Price to be subtracted from buyer
<index> = Object list number
<name>  = Object name

Ex:
buy { "100 10 orc-leg-stewed";

Would be triggered with:
  buy orc
  buy 10
  buy orc-stewed

Would Not be triggered with:
  buy 1
  buy 1-orc

  The buy command simply allows you to give the mobs a shop
like feel to them.  The <cost> is automatically deducted from
the buyer so no special work is needed in that respects.
Topic: list
--------------------

Ex:
list { "<words>";
	...responses...;
	}

<words> = Text to match.

Ex:
  list { "";

Would be caught by:
  list

Ex:
  list { "dinner";

Would be caught by:
  list dinner

  The list command, like the buy command, allows you to give mobiles
a more shopkeeper like feel.
Topic: pulse
--------------------

Ex:
pulse { "";
	...responses...;
	}

  The pulse block is triggered everytime the mobile sound is called.
This is not meant as a replacement for mobile sounds only a way to
do more with them.
Trigger: package
---------------------
 
ex:
package { "<number>";
       <action>;
       <action>;
     }

<trigger> { "";
	link package <number>;
	}

The package trigger was designed to handle places where duplicate functionality
was required.  That is, if I want a number of responses all to do the same
thing, rather than create highly redundant functionality in many responses,
I can create a single "package" with the actions that will be repeated, and
link to this package via the "link" action.

There is no direct way to call a package.  The only way a package is
accessible is via a "link" to it.  You can link to a package any number
of times.

The <number> argument is used to uniquely identify any number of packages on
the same mob.  Thus, you can have "package 1" and "package 2" that are
separate responses called from separate locations.  Obviously, indeterminate
results would occur if you had two "package 1"s on the same creature.

Packages are unique to each mob.  There is no way to call a package on a
different mob.
Advanced Action: flag
---------------------
 
ex:
<trigger> { "<arguments>";
       <other actions>;
      flag %n;
       <other actions>;
     }

The flag command will make the trigger-mob flag someone with the solo-quest
flag.  This is the same as if a god had done flag <person> solo so see
HELP FLAG for effects of such a flag.

It is advised that you make sure the player understands he is about to be
flagged, effects of the flag (no grouping, following, riding, spells cast on,
etc) and that they acknowledge these facts PRIOR to actually being flagged.
Advanced Action: unflag
---------------------
 
ex:
<trigger> { "<arguments>";
     <other actions>;
     unflag %n; 
     <other actions>;
     }

Unflag basically does the opposite of flag, it takes the solo-quest flag
off of the person.
Advanced Action: personalize
---------------------
 
ex:
<trigger> { "<arguments>";
       <other actions>;
       personalize <number>; 
       <other actions>;
     }

Personalize is an action that will load the item given by <number> as a vnum,
personalize it to be the person who did the trigger's items, and give it to
the person.

At the end of the personalize action, the item will be in the performer's
inventory, so you do NOT need to do a separate give.  Personalize also loads
so do NOT do a separate load.

There is text associated with personalizing automatically done.  You do not
need separate echos for loading, stringing and giving.
Example Response File:
---------------------
 
A response file consists of a header, comments, and multiple response
blocks.  The header consist of 4 lines, each starting with a #.  The first
line is the mob's name associated with the file, the second is the quest
name, the third is the creator and the fourth is copyright information.
Comments give more information about a file and also start with a #.  Each
response block indicates all actions to be associated with a given
trigger.


example file:
-------------

# Princess of Grimhaven		<--- Mobs name
# Generic Quest			<--- Quest to which mob belongs
# Created by Dolgan		<--- Person who created quest (with date)
# Copyright 1998, <h> Development Team.  All rights reserved.

say { "hello";              <--- this is the trigger line
        smile %n;                <----- these are the actions to perform
        toroom $n kisses $N.;    <---|
        tovict $n kisses you.;   <---|
        }

# Directions to L40 Mage Guildmaster	<--- Comment

say { "next guildmaster";
        tell %n "Finding your next guildmaster is part of your training.";
        tell %n "However, I can give you a hint...";
        tell %n "The one you seek is a farmboy at heart.....";
        tell %n "and he is very fond of the pipe.";
	}
Advanced Action: resize
---------------------
 
ex:
<trigger> { "<arguments>";
       <other actions>;
       resize <number>; 
       <other actions>;
     }

Resize is an action that will load the item given by <number> as a vnum,
resize it to fit the person who did the trigger's items, personalize
the item, and then give it to the person.

At the end of the resize action, the item will be in the performer's
inventory, so you do NOT need to do a separate give.  Resize also loads
so do NOT do a separate load.

There is text associated with resizing automatically done.  You do not
need separate echos for loading, stringing and giving.

Note - this action should be used VERY sparingly, and only with the
express permission of the LOW.  We have sized objects and set race heights
the way they are for a reason and too much resizing will unbalance things.
Advanced Action: special
---------------------
 
ex:
<trigger> { "<arguments>";
       <other actions>;
       special <number>; 
       <other actions>;
     }

Special is used to cause the response to hand control over to a hard coded
event (special response) handler.  What the special does depends on what 
<number> is sent.  Please check with the LOW and/or a coder before setting
up a "special" in your responses.

The main use of special is to allow for things that the standard response
actions do not handle to occur.
Topic: checkroom
--------------------

Ex:
<block> { "<args>";
	...responses...;
	checkroom <room>;
	...responses...;
	}

<room> = Room the mobile should be in.

  This will check the script mobs current room and make sure the
current one, plus the passed <room> one, match up.  If they do not
then execution of the script is stopped.
Topic: checkzone
--------------------

Ex:
<block> { "<args>";
	...responses...;
	checkzone <room>;
	...responses...;
	}

<room> = Room inside zone that mobile should be in.

  This will check the mobiles current inRoom zone and verify that
it matches up with the zone <room> is in.  If not then parsing is
stopped.

Notes:
  <room> == Factual room, not zone number.  If you see this in
  show zones:
    0 Void                                     25m   17m      0-0
    1 Immortal Zone                              25m   17m      1-99
    2 Grimhaven Roads                           5m    3m    100-249
    3 Royal Barracks                           15m    7m    250-299
    4 TB Sheldon Auditorium                    25m   17m    300-349
    5 King's Palace                            25m   17m    350-399
  Then to make sure a mobile is Only being triggered in zone 5,
  King's Palace, you would do:
    checkzone 350;
  Not:
    checkzone 5;
SUBSTRING: OBJCOST
---------------------
 
ex:
give { "-#OBJCOST( 300, 10)#";
       <action>;
	say "I received #OBJCOST( 300, 10)# talens!";
       <action>;
     }

The OBJCOST substring was developed in response to the large number of
response mobs that were acting as traders.  In essence, it allows you
to embed the price of an object into a script.  Obviously, item prices
tend to fluxuate over the long haul, so this is a good way to let the
scripts adjust for this possible change.

The string MUST follow a certain syntax.  That syntax is:
#OBJCOST( obj_vnum, markup_percent)#

obj_vnum is the virtual number of the item in question.  In this example,
item #300 is a long sword.

Markup is an int allowing for the cost to be incremented slightly over its
true cost.  In this example, we are indicating we want the price to be 10%
more than its true cost.

When this mob is loaded, it will determine what the current market value
of a sword is (plus 10%), and derive the proper response.  For instance, if
a long sword's price (in the tinyfile) was 1000 talens, the following 
response would be created:

give { "-1100";
	say I have been given 1100 talens;
	}

Thus, the substring has been replaced by the derived pricing.  And if a
subsequent change is made to the item that affects its price, your script
will not need to be updated. 
Quest Toggles
-----------------

Quest toggles are hard coded state variables that allow a response quest to
be set up and run automatically.  They are best illustrated through example.

At level 10, a person becomes eligible for a given quest.  The guildmaster
would be set up to set quest-toggle 10 on this person and to go see a certain
mob.

The mob indicated could then be set up with a roomenter response.  The first
action would be checktoggle 10.  Subsequent actions would be says, tells, etc.
Thus, if a person comes in and has the quest-toggle 10 set, the mob will
talk to them.  Otherwise, it probably will do nothing.

Eventually, the mob would describe some chore the person is to perform.  If
the person accepts the task, the mob could untoggle 10 and toggle 11.
A new response could be set up for if person comes back in with 11 set.
  checktoggle 11;
  say %n, why are you back here?  Go and finish your task.;

Thus by checking toggles, setting new toggles and unsetting old toggle, the
person can proceed through the quest and have things occur at the proper time.

Quest toggles are saved in the person's playerfile.  They will last through
reboot and rent.  Multiple people can be on the same quest simultaneously.

Toggle quests may need code in order to have the initial toggle assigned at
a certain time (gained a level, reached a learningness).  Other code may be
required if exotic events (like combat with a given mob) need to check, set
and unset toggles.

The toggle numbers have to be assigned by the coder (so they are linked
properly to the proper bit on the player's file).

Quest Toggles : Best Practices
------------------------------

The following guidelines are recommended procedures for creating good,
bug-proof quests.

1.) Plot the quest out sequentially at the outset before you start writing
quest scripts.  Ideally, you should identify the number of toggles that
you will need before you begin.

2.) Quests should proceed linearly.  You should be turning a toggle off each
time you turn a toggle on.  Think of toggles as "milestones" along the quest.

3.) Obviously, most quests will have forks.  Maybe they killed the mob, maybe
they got help.  Either way, the quest should still be linear!  Turn off
the toggle that says they were ready to attack the mob, and turn on the
toggle that says they killed it ok OR turn on the toggle saying they failed.
Yes, the quest branches, but use the toggle to indicate which branch they
are now on.

4.) Remember to put checktoggles on any trigger that is for a quest.  Double
check each trigger!  If you forget a checktoggle, it is quite possible that
ANYONE can step into the quest midway, and it's always great to see mages
walking around with monk's belts, etc.

5.) If you are going to flag a player solo on the quest, check all possible
paths beyond to insure that they become unflagged on each possible path.

6.) Don't unflag or untoggle bits "just to be safe".  If you aren't sure if
a bit is on, or if they are flagged, then you haven't planned the quest
adequately.  If you, the designer, aren't sure if the quester would have
a toggle, or a flag at that point, then there will almost certainly be
problems for players and for the debugger of the quest.

7.) If you are permitting questers to "take a break", the response must be
performed by the creature who first set the toggle that you are backing them
up to.  One, and only one, creature is allowed to turn a toggle on.  You
can NOT have mob B set a toggle originally set by mob A!

7b.) To get around this limitation, you are advised to have two toggles
anytime the mob shifts from one mob to another.  That is, mob A sets "seeking
mob B" toggle, and mob B sets "mob B found" (unsetting the seeking of course).
This way, if the next toggle is "on nasty quest for mob B", you can let mob
B respond to "take a break" which will unset "nasty quest", and set "found B".
The newbie mistake is to try and get away without "found B", which results in
"take a break" dropping back to "seeking B" (which is an error, B can't set
bit also set by A).

8.) Do not underestimate the package command.  Frequently, you want the same
"say" actions from multiple states (toggles).  Putting the says into a
package, and having trigger#1="checktoggle X, link package" and trigger#2=
"checktoggle Y, link package" accomplishes this.  The says will only be
said if at the points on the quest where it is appropriate.

8b.) The old way of doing this was to create some multi-state triggers.  This
is a bad idea.  For instance, a single toggle that said "I am on this quest"
would be set simultaneously with toggles marking the checkpoints along the
quest.  Some actions would look to see if they were on the quest, and react
according to that.  This is toggle abuse, and requires multiple toggles to
be activated at any one moment in time for a given quest.  Use the package
method instead, and set up links from as many separate triggers as are needed.

9.) Be careful about combining materials and toggles as part of a quest.
(eg. retrieve a stone gained from killing a mob).  In an ideal world,
they would receive a new toggle when they get the stone and you need only
design a trigger for "give stone".  Unfortunately, what happens if they
were find the stone for sale in a store (stone, but no toggle), or lose the
stone after getting it (toggle, but no stone)...?  A well designed quest
will not forget to handle such problems.

10.) Make triggers simple!  Make it easy for players to figure out what the
proper trigger is!  Nothing sucks more than KNOWING you are at the right place
with the correct answer and not being able to get the creature to respond
properly!

11.) Beware the ambiguous trigger.  Trigger#1="say boat", Trigger#2="say 
big boat".  If I say "where is the big boat", which trigger will I get?
This is dependant on implementation (which obviously might change, so just
because it works correctly now....).  Obviously, avoid say triggers that
are abbreviations of other say triggers.
Advanced Action: toggle
---------------------
 
ex:
<trigger> { "<arguments>";
       <other actions>;
       toggle <number>; 
       <other actions>;
     }

toggle will set quest-toggle <number> on the performer.  Quest-toggles are
hard coded so talk with a coder before using this command.  The toggle command
will verify that the bit is being toggled by the proper mob to avoid 
mistoggling.
Advanced Action: untoggle
---------------------
 
ex:
<trigger> { "<arguments>";
       <other actions>;
       untoggle <number>; 
       <other actions>;
     }

untoggle will unset quest-toggle <number> on the performer.  Quest-toggles are
hard coded so talk with a coder before using this command.
Advanced Action: checktoggle
---------------------
 
ex:
<trigger> { "<arguments>";
       <other actions>;
       checktoggle <number>; 
       <other actions>;
     }

Checktoggle is used to check for the presence of a given quest-toggle before
performing additional actions.  Actions after the checktoggle are only
performed if the performer has the given toggle bit set.  Otherwise, the 
subsequent actions are ignored.  If the bit is not set, the other responses the
mob has will be compared to allow 1 trigger to have separate actions based
on presence of quest bits (you would need multiple response blocks set up
though).
Actions and Triggers:
--------------------

Each response block consists of one trigger, some trigger parameters and
a series of actions to perform if the trigger goes off.

say { "next guildmaster";
        tell %n "Finding your next guildmaster is part of your training.";
        tell %n "However, I can give you a hint...";
        tell %n "The one you seek is a farmboy at heart.....";
        tell %n "and he is very fond of the pipe.";
	}

In this situation, the response is triggered by the say command.  The trigger
text is "next guildmaster".  That is, if a pc says next guildmaster, our
response will trigger.  Only a handful of valid triggers have been set up.
Please see the following chapters to get a list of valid trigger commands.

The next 4 lines represents the actions of the response.  That is, when someone
says next guildmaster, then this response-mob is going to tell to them four
times.  Responses, for the most part, are any valid mud command and take the
same form as you are familiar with.  That is, smile will cause the mob
to smile, kill will make it attack, give will exchange goods, etc.

Take note of the %n.  This indicates a replacement string that may be
used in all actions.  %n will be replaced with the speaker's name.
Advanced Action: checkuntoggle
---------------------
 
ex:
<trigger> { "<arguments>";
       <other actions>;
       checkuntoggle <number>; 
       <other actions>;
     }

Checkuntoggle is used to check for the absence of a given quest-toggle
before performing additional actions.  Actions after the checkuntoggle are
only performed if the performer does not have the given toggle bit set. 
Otherwise, the subsequent actions are ignored.  If the bit is set, the
other responses the mob has will be compared to allow 1 trigger to have
separate actions based on presence of quest bits (you would need multiple
response blocks set up though). 

Note: This action is deprecated!  In a properly designed quest, you should
not need to determine if a toggle is *NOT* set.
Trigger:  say
---------------------
 
ex:
say  { "text";
       <action>;
       <action>;
     }

Say will trigger whenever a person says something matching "text".
Asks or whispers to the response mob will also be handled by this same
response.  Tells and shouts will NOT function due to the global nature
of these commands.

The comparison will be done in a case-insensitive format.  ie, Mountain,
MOUNTAIN, mountain, and MoUnTaIn are all identical.  

"text" will also be checked as a substring against what was actually said.
Thus, if the trigger is "small key" and the person says, "where is the 
small key", the response will trigger.
Trigger: give
---------------------
 
ex:
give { "<number>";
       <action>;
       <action>;
     }

The give trigger permits the response mob to perform actions when things are
given to the creature.  <number> should be an actual number like -8 or 405.

<number>, if positive, will be treated as a vnum of an object that will
trigger the response.  Thus, if <number> = 352, then when item 352 is given,
the actions will be performed.  NOTE: The item is automatically junked by
default (without any text).  You may wish to have some sort of emote in
the action to make players aware that the item is gone.  If you need the
item, you will have to reload the item in the action script.

<number>, if negative, will be regarded as a number of talens.  Thus, if
<number> = -100, then the trigger goes off when someone gives 100 (or more)
talens to the mob.  The trigger will not go off if they give 1 talen 100
times, it has to be received in one lump sum.  NOTE: the talens are not added
to the mob's money.

At this time, it is not possible to use combination of items as triggers.
Trigger: roomenter
---------------------
 
ex:
roomenter { "";
       <action>;
       <action>;
     }

roomenter { "100";
       <action>;
       <action>;
     }

Roomenter will be triggered anytime a PC enters the room with the response
mob.  It does not trigger for NPCs.

Roomenter with an argument of "" will trigger all the time.  With a numeric
argument, the roomenter trigger will only fire if the number indicated is
the room the PC entered FROM.  In the above example, it will fire if they
came from room 100.  The intention of this latter trigger is to allow you
to write different responses based on direction of travel; obviously, your
trigger mob should be set sentinel for this to work though.

One caveat with this trigger, PCs often move in groups.  A tremendous amount
of spam can be generated by this trigger unless the actions are set up
carefully.  In general, do not have the action do anything that is seen
by everyone.  ie, limit yourself to tells or tovict actions.

The main purpose of this trigger is to indicate the mob as a response mob
and to provide clues as to what PCs may want to ask about for other responses.
eg, if a separate response has PCs asking about a small key the mob has, then
a good roomenter trigger might be to have the mob fiddling with the small
key when they come in.
Trigger: socials
---------------------
 
ex:
<social> { "<none | self | me | other>";
       <action>;
       <action>;
     }

All socials (puke, smile, etc) will operate as triggers.  Put the social you
wish to have used in for <social>.

The trigger arguments may be "none", "self", "me" or "other".  These may be
used in combination, eg. "none other" will be triggered for either none or
other.

As you are aware, socials may take arguments.  For example, I can smile, or I
can smile at somebody.  The first is the situation where the user does not
specify a target (User smiles.).  This situation triggers if "none" is in
the trigger arguments.  The "self" condition operates if user does the social at
himself (User smiles at himself.)  The "me" operates if the trigger mob is
the one the social is targeted at.  The "other" condition is basically if
user has done the social on someone other than the response mob or himself.

Realize some socials are set up so that they can't be done without arguments
(wave, thank) or can't be done with arguments (burp, snore).  Use common
sense when devising trigger arguments for the various socials.
Action: toroom
---------------------
 
ex:
<trigger> { "<arguments>";
       <other actions>;
       toroom <string>;
       <other actions>;
     }

The toroom action is an advanced emote or echo command.  It will send <string>
to every person in the room (except the trigger mob).  It is recommended that
toroom make no reference to the person doing the action (use tovict, tonotvict
instead).

The beauty of toroom is that it allows you to use replacement characters
that will be filled in when it is actually performed based on who did the
trigger and with what.

Replacement strings:
$n  = the trigger-mobs name
$e  = "he", "she" or "it" based on sex of trigger-mob
$m  = "him", "her", "it" based on sex of trigger-mob
$s  = "his", "hers", "its" based on sex of trigger-mob

$o  = the first word in the name of the trigger-object (for give)
$p  = the full name of the trigger-object

Example:
toroom $n tosses a small key into the air and catches it behind $s back.
becomes
A lazy thief tosses a small key into the air and catches it behind his back.
Action: tovict
---------------------
 
ex:
<trigger> { "<arguments>";
       <other actions>;
       tovict <string>;
       <other actions>;
     }

The tovict action is an advanced emote or echo command.  It will send <string>
to just the person doing performing the trigger.  In general, any place you use
a tovict action should also have a tonotvict action for everyone else.

The beauty of tovict is that it allows you to use replacement characters
that will be filled in when it is actually performed based on who did the
trigger and with what.

Replacement strings:
$n  = the trigger-mobs name
$e  = "he", "she" or "it" based on sex of trigger-mob
$m  = "him", "her", "it" based on sex of trigger-mob
$s  = "his", "hers", "its" based on sex of trigger-mob

performer = person who triggered the action
$N  = the performer's name
$E  = "he", "she" or "it" based on sex of performer
$M  = "him", "her", "it" based on sex of performer
$S  = "his", "hers", "its" based on sex of performer

$o  = the first word in the name of the trigger-object (for give)
$p  = the full name of the trigger-object

Example:
tovict $n puts $s hand on your back.
becomes
A lazy thief puts his hand on your back.
